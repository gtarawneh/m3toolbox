function [t exitCode] = runAnimation3D(expt)

KbName('UnifyKeyNames'); 

createWindow3D();

window = getWindow();

frameRate = getFrameRate();

resetWindow();

exitCode = 0;

% -------------------------------------------------------------------------
%
% Environment Specifications:
%
% M             : resolution (pixels)
% txtCount      : requested number of textures
% R             : white tile percentage ([0, 1])
% textured      : use slightly textured tiles instead of monochromatic ones
% camouflage    : enable bug camouflage
%
% The stimulus must run in full screen and so not all integer M values are
% accepted (depending on screen aspect ratio). Incorrect M values will
% generate a warning and dbefault to M=1
%
% -------------------------------------------------------------------------

M = 20;

txtCount = 1000;

%R = 0.845 * Rd^2 + 0.1529 * Rd - 0.0005; % gamma correction

R = 0.5;

textured = 0;

camouflage = 0;

dynamicBackground = 0;

dynamicControl = 1;

timeLimit = -1; % in seconds (-1 for infinity)

% -------------------------------------------------------------------------
%
% DX Function:
%
% -------------------------------------------------------------------------

%dir = 2 * (rand > 0.5) - 1;

funcMotionX = @(t)  t * 1500;

stepDX = 1;

% -------------------------------------------------------------------------
%
% Bug Specifications:
%
% -------------------------------------------------------------------------

bugFrames = getBugFrames('fly'); % stick, beetle, fly

motionFuncs = getMotionFuncs('swirl'); % horizontal, zigzag, swirl, auto, keyboard

nominalSize = 0.5; %0.166;

bugVisible = 0;

% -------------------------------------------------------------------------
%
% User functions:
%
% -------------------------------------------------------------------------

funcRender = @(window, t, sW, sH) 0;

start = @(window, t, sW, sH) 0;

abort = @(window, t, sW, sH) 0;

% -------------------------------------------------------------------------
%
% Reloading settings from expt
%
% -------------------------------------------------------------------------

if nargin>0
    
   if isfield(expt, 'R')
        
        R = expt.R;
        
    end    
    
        
    if isfield(expt, 'M')
        
        M = expt.M;
        
    end
    
    if isfield(expt, 'stepDX')
        
        stepDX = expt.stepDX;
        
    end
    
    if isfield(expt, 'funcMotionX')
        
        funcMotionX = expt.funcMotionX;
        
    end
    
    if isfield(expt, 'funcRender')
        
        funcRender = expt.funcRender;
        
    end
    
    if isfield(expt, 'start')
        
        start = expt.start;
        
    end
    
    if isfield(expt, 'abort')
        
        abort = expt.abort;
        
    end
    
    if isfield(expt, 'timeLimit')
        
        timeLimit = expt.timeLimit;
        
    end
    
    if isfield(expt, 'bugVisible')
        
        bugVisible = expt.bugVisible;
        
    end
    
    if isfield(expt, 'bugFrames')
        
        bugFrames = expt.bugFrames;
        
    end
    
    if isfield(expt, 'motionFuncs')
        
        motionFuncs = expt.motionFuncs;
        
    end
    
    dynamicControl = 0;
 
end

% -------------------------------------------------------------------------
%
% Print available commands
%
% -------------------------------------------------------------------------

if (dynamicControl == 1)
    
    arr = {
        ' Key'  , 'Function', ...
        '---------'  , '--------', ...
        'a'     , 'motion mode: auto', ...
        's'     , 'motion mode: swirl', ...
        'k'     , 'motion mode: keyboard', ...
        'h'     , 'motion mode: horizontal', ...
        ''      , '', ...
        'ctrl'  , 'highlight bug', ...
        'b'     , 'show bug', ...
        'n'     , 'hide bug', ...
        ''      , '', ...
        '1'     , 'bug shape: fly', ...
        '2'     , 'bug shape: beetle', ...
        '3'     , 'bug shape: stick', ...        
        ''      , '', ...
        'Page Up', 'scroll background: right', ...
        'Page Down', 'scroll background: left', ...
        'w'     , 'change background', ...
        };
   
    clc;
    
    
    for i=1:2:length(arr)
        
        fprintf('%10s \t %s\n', arr{i}, arr{i+1});
        
    end
    
    disp(' ');
    
end

% -------------------------------------------------------------------------
%
% Function Body:
%
% -------------------------------------------------------------------------

% getting screen resolution (sW x sH) and board dimensions (w x h)

[sW sH] = getResolution();

[w h] = rat(sW/sH);

w = w * 2;
h = h * 2;

% determining maximum side length of block that would fit w times h blocks
% within the screen resolution:

n1 = floor(sW/w);
n2 = floor(sH/h);

blockSide = min(n1, n2);

N = blockSide/M;

if mod(N,1)
    disp('Incorrect m value, default to m=1');
    N = blockSide;
end

blockSide = blockSide - mod(blockSide, N);

marginRight = (sW - blockSide * w) / 2;
marginTop   = (sH - blockSide * h) / 2;

if marginRight + marginTop>0
    disp('Warning, not running in full screen!');
end

% preparing textures:

tileSide = blockSide / N;

txtID = zeros(2, 1);

%fprintf('uploading %i textures of size %ix%i to VRAM ... ', txtCount, blockSide, blockSide); drawnow

if (textured)
    
    tile(:,:,1) = 0   + 50 * rand(tileSide, tileSide);
    tile(:,:,2) = 200 + 50 * rand(tileSide, tileSide);
    
else
    
    tile(:,:,1) = ones(tileSide, tileSide) * 0;
    tile(:,:,2) = ones(tileSide, tileSide) * 125;
    
end

% prepare two blocks B1 (containing only tile 0) and B2 (containing
% only tile 1)

B1 = repmat(tile(:, :, 1), N);
B2 = repmat(tile(:, :, 2), N);

% prepare the vector K which is used in pattern inflation below

K = ceil((1:N*tileSide) / tileSide);

% calculating absolute maximum number of textures

txtCountMax = 2^(N*N);

% preventing txtCount > txtCountMax

txtCount = min(txtCount, txtCountMax);

% creating and uploading textures to VRAM

tic

for i=1:txtCount
    
    %texture = zeros(blockSide, blockSide);
    
    if (txtCount >= txtCountMax)
        
        % if number of textures equals or exceed theoritical maximum, enumerate all
        % possible texture permutations
        
        pattern = vec2mat(dec2bin(i-1, N^2)-48, N);
        
    else
        
        % otherwise, choose random permutations
        
        pattern = rand(N, N) > R;
        
    end
    
    % the two lines below prepare the matrix mask which is essentially
    % an "inflated" copy of pattern, for example:
    %
    % for pattern:
    %
    % 0 1
    % 1 0
    %
    % mask would be:
    %
    % 0 0 1 1
    % 0 0 1 1
    % 1 1 0 0
    % 1 1 0 0
    %
    % Each row and column is duplicated by tileSide (2 in the example
    % above)
    
    mask = pattern(K, K);
    
    % now, mask is used to combine portions of B1 and B2 to create the
    % texture
    
    texture = mask .* B1 + (1-mask) .* B2;
    
    % upload texture and store returned handle
    
    txtID(i) = Screen(window, 'MakeTexture', texture);
    
end

tileID{1} = Screen(window, 'MakeTexture', tile(:, :, 1));
tileID{2} = Screen(window, 'MakeTexture', tile(:, :, 2));

%disp('done'); toc; drawnow

fCount = length(bugFrames);

[bugHeight bugWidth] = size(bugFrames{1}); % in tiles

% preparing bug camouflage mask

bugCamMask = rand(size(bugFrames{1})) > 0.5;

% user function

start(window, sW, sH);

% rendering loop:

i = 0; % current frame

dx = 0;

board = [];

old_d1 = -10;

while(1)
    
    i = i + 1;
    
    t = i/frameRate;
    
    if (timeLimit > -1)
        
        if (t >= timeLimit)
            
            break;
            
        end
        
    end
    
    % draw board
    
    if (dynamicControl == 0)
    
        dx = ceil(funcMotionX(t)/stepDX) * stepDX;
    
    end
    
    %dy = ceil(t*200);
    
    
    
    %dx = ceil(t*400);
    
    dy = 0;
    
    if isempty(board) || dynamicBackground
       
        board = floor(rand(h+2, w+2) * txtCount);
        
    end
    
    
    
    
    
    for x=1:w
        
         Screen('SelectStereoDrawBuffer', window, 0);
        
        drawRow(window, x, txtID, h, board, blockSide, [marginRight marginTop marginRight marginTop], dx, dy, sW, sH)
        
         Screen('SelectStereoDrawBuffer', window, 1);
         
         drawRow(window, x, txtID, h, board, blockSide, [marginRight marginTop marginRight marginTop], dx, dy, sW, sH)
      
    end
    
    
    d1 = ceil(t*1)*tileSide;
    
    
    
    if (d1 ~= old_d1)
        
        board = floor(rand(h, w*3) * txtCount);
        
        old_d1 = d1;
        
    pat_id = floor(rand * txtCount) + 1;    
        
    end
    
    
    
    Screen('SelectStereoDrawBuffer', window, 0);
    
    sourceRec = [0 0 1  1] * blockSide + 1;
        
    Screen(window, 'DrawTexture', txtID(pat_id), sourceRec, sourceRec + tileSide * 2 + [d1 0 d1 0]);
    
    %drawRow(window, k, txtID, h, board, blockSide, [marginRight marginTop marginRight marginTop] + d1, dx, dy, sW, sH)
    
    Screen('SelectStereoDrawBuffer', window, 1);
        
    %drawRow(window, k, txtID, h, board, blockSide, [marginRight marginTop marginRight marginTop] + d1 + 5, dx, dy, sW, sH)
    
    Screen(window, 'DrawTexture', txtID(pat_id), sourceRec, sourceRec + tileSide * 2  + 5+ [d1 0 d1 0]);

    Screen(window, 'DrawingFinished');
    
    
        

    
    
    % draw bug
    
    if (bugVisible)
    
        ym = floor((h * N - bugHeight)/2);
        
        xm = floor((w * N - bugWidth)/2);
        
        d = motionFuncs.XY(t);
        
        bdx = d(1);
        bdy = d(2);
        
        %dy = motionFuncs.Y(t);
        
        bugCenter(1) = (xm + bugWidth/2) * tileSide + bdx;
        bugCenter(2) = (ym + bugHeight/2) * tileSide + bdy;
        
        bugAngle = motionFuncs.Angle(t);
        
        bugSize = motionFuncs.S(t) * nominalSize;
        
        % rotate and scale bug
        
        rotateWindow(bugCenter, bugAngle);
        
        scaleWindow(bugCenter, bugSize);
        
        % draw marker
        
        [keyIsDown, secs, keyCode ] = KbCheck;
        
        if (keyCode(KbName('Control')))
            
            highR = tileSide * 20;
            
            bc = bugCenter + [0 tileSide];
            
            Screen(window, 'FrameOval', [1 0 0 1], [bc-highR bc+highR] , 2);
            
            Screen(window, 'FillOval',  [0.9 0 0 0.3], [bc-highR bc+highR]);
            
        end
        
        % draw bug tiles:
        
        f = mod(floor(motionFuncs.F(t)), fCount) + 1; % frame number
        
        for y=1:bugHeight
            
            for x=1:bugWidth
                
                if bugFrames{f}(y, x)
                    
                    % tile = ;
                    
                    sourceRec = [0 0 1 1] * tileSide;
                    
                    destRec = sourceRec;
                    
                    destRec = destRec + [(xm + x-1) ym+y (xm + x-1) ym+y] * tileSide;
                    
                    destRec = destRec + [marginRight marginTop marginRight marginTop] - 1;
                    
                    destRec = destRec + [bdx bdy bdx bdy];
                    
                    m = 2 - (bugCamMask(y, x) || ~camouflage);
                    
                    Screen(window, 'DrawTexture', tileID{m}, sourceRec, destRec);
                    
                end
                
            end
            
        end
        
        % reverse (rotate and scale) after drawing bug
        
        rotateWindow(bugCenter, -bugAngle);
        
        scaleWindow(bugCenter, 1/bugSize);
        
    end
    
    % user function
    
    funcRender(window, t, sW, sH);
    
    % render drawings
    
    Screen(window, 'Flip');
    
    % checking for key presses
    
    [keyIsDown, secs, keyCode ] = KbCheck;
    
    if (keyCode(KbName('Escape')))
        
        closeWindow();
        
        exitCode = -1; % abort
        
        break;
        
    end
    
    if (dynamicControl == 1)
        
        if (keyCode(KbName('s')))
            
            motionFuncs = getMotionFuncs('swirl');
            
            i = 0;
            
        end        
        
        if (keyCode(KbName('a')))
            
            motionFuncs = getMotionFuncs('auto');
            
            i = 0;
            
        end
        
        if (keyCode(KbName('k')))
            
            motionFuncs = getMotionFuncs('keyboard');
            
            i = 0;
            
        end
        
        if (keyCode(KbName('h')))
            
            motionFuncs = getMotionFuncs('horizontal');
            
            i = 0;
            
        end
        
       if (keyCode(KbName('b')))
            
            bugVisible = 1;
            
       end
       
       if (keyCode(KbName('n')))
            
            bugVisible = 0;
            
       end  
       
       if (keyCode(KbName('w')))
            
            board = floor(rand(h, w*3) * txtCount);
            
       end  
       
       
       
       if (keyCode(KbName('1!')))
           
           bugFrames = getBugFrames('fly');
           
           [bugHeight bugWidth] = size(bugFrames{1}); % in tiles
           
           bugCamMask = rand(size(bugFrames{1})) > 0.5;
           
       end
       
       if (keyCode(KbName('2@')))
           
           bugFrames = getBugFrames('beetle');
           
           [bugHeight bugWidth] = size(bugFrames{1}); % in tiles
           
           bugCamMask = rand(size(bugFrames{1})) > 0.5;
           
       end
       
       if (keyCode(KbName('3#')))
           
           bugFrames = getBugFrames('stick');
           
           [bugHeight bugWidth] = size(bugFrames{1}); % in tiles
           
           bugCamMask = rand(size(bugFrames{1})) > 0.5;
           
       end
       
       if (keyCode(KbName('PageUp')))
           
           dx = dx + 10;
           
       end
       
       if (keyCode(KbName('PageDown')))
           
           dx = dx - 10;
           
       end
       
       if (keyCode(KbName('x')))
           
           nominalSize = nominalSize + 0.01;
           
       end
       
       if (keyCode(KbName('z')))
           
           nominalSize = nominalSize - 0.01;
           
       end
        
    end
    
    % user functions

    if (abort(window, t, sW, sH))
        
        break;
        
    end
    
    if (mod(i, 10) == 0)
    
    %drawnow
    
    end
    
end

end

function drawRow(window, x, txtID, h, board, blockSide, margins, dx, dy, sW, sH)

for y=1:h/3
    
    id = board(y, x) + 1;
    
    sourceRec = [0 0 1 1] * blockSide;
    
    destRec = sourceRec + [x-1 y-1 x-1 y-1] * blockSide + margins;
    
    destRec = destRec + [dx 0 dx 0];
    
    destRec = destRec + [0 dy 0 dy];
    
    
    
    % x block relocation 1
    
    k = destRec(1);
    d = destRec(3) - destRec(1);
    
    q = mod(k-1, sW) + 1;
    
    destRec(1) = q;
    destRec(3) = q + d;
    
    Screen(window, 'DrawTexture', txtID(id), sourceRec, destRec);
    
    
    
    % x block relocation 2
    
    k = destRec(3);
    d = destRec(1) - destRec(3);
    
    q = mod(k-1, sW) + 1;
    
    destRec(3) = q;
    destRec(1) = q + d;
    
    Screen(window, 'DrawTexture', txtID(id), sourceRec, destRec);
    
    
    
end

end